// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `Slices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package slices;

public enum MessageType implements java.io.Serializable
{
    
    AcceptProposal(0),
    
    Agree(1),
    
    Cancel(2),
    
    CallForProposals(3),
    
    Confirm(4),
    
    Disconfirm(5),
    
    Failure(6),
    
    Inform(7),
    
    InformIf(8),
    
    InformRef(9),
    
    NotUnderstood(10),
    
    Propagate(11),
    
    Propose(12),
    
    Proxy(13),
    
    QueryIf(14),
    
    QueryRef(15),
    
    Refuse(16),
    
    RejectProposal(17),
    
    Request(18),
    
    RequestWhen(19),
    
    RequestWhenever(20),
    
    Subscribe(21);

    public int
    value()
    {
        return __value;
    }

    public static MessageType
    valueOf(int __v)
    {
        switch(__v)
        {
        case 0:
            return AcceptProposal;
        case 1:
            return Agree;
        case 2:
            return Cancel;
        case 3:
            return CallForProposals;
        case 4:
            return Confirm;
        case 5:
            return Disconfirm;
        case 6:
            return Failure;
        case 7:
            return Inform;
        case 8:
            return InformIf;
        case 9:
            return InformRef;
        case 10:
            return NotUnderstood;
        case 11:
            return Propagate;
        case 12:
            return Propose;
        case 13:
            return Proxy;
        case 14:
            return QueryIf;
        case 15:
            return QueryRef;
        case 16:
            return Refuse;
        case 17:
            return RejectProposal;
        case 18:
            return Request;
        case 19:
            return RequestWhen;
        case 20:
            return RequestWhenever;
        case 21:
            return Subscribe;
        }
        return null;
    }

    private
    MessageType(int __v)
    {
        __value = __v;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeEnum(value(), 21);
    }

    public static MessageType
    __read(IceInternal.BasicStream __is)
    {
        int __v = __is.readEnum(21);
        return __validate(__v);
    }

    private static MessageType
    __validate(int __v)
    {
        final MessageType __e = valueOf(__v);
        if(__e == null)
        {
            throw new Ice.MarshalException("enumerator value " + __v + " is out of range");
        }
        return __e;
    }

    private final int __value;
}
