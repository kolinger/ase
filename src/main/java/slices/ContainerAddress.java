// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `Slices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package slices;

public class ContainerAddress implements java.lang.Cloneable, java.io.Serializable
{
    public String host;

    public int port;

    public ContainerAddress()
    {
    }

    public ContainerAddress(String host, int port)
    {
        this.host = host;
        this.port = port;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ContainerAddress _r = null;
        if(rhs instanceof ContainerAddress)
        {
            _r = (ContainerAddress)rhs;
        }

        if(_r != null)
        {
            if(host != _r.host)
            {
                if(host == null || _r.host == null || !host.equals(_r.host))
                {
                    return false;
                }
            }
            if(port != _r.port)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::slices::ContainerAddress");
        __h = IceInternal.HashUtil.hashAdd(__h, host);
        __h = IceInternal.HashUtil.hashAdd(__h, port);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(host);
        __os.writeInt(port);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        host = __is.readString();
        port = __is.readInt();
    }

    public static final long serialVersionUID = 1899336032L;
}
